if (typeof Object.assign != 'function') {
  Object.defineProperty(Object, "assign", {
    value: function assign(target, varArgs) {
      'use strict';

      if (target == null) {
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) {
          for (var nextKey in nextSource) {
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    },
    writable: true,
    configurable: true
  });
}

var s = void 0,
  player = void 0,
  state = void 0,
  _this = void 0,
  App = void 0;

var YT_IDS = ['Sak879xh7O0', 'YPi_DjfE8DI', 'lxjZmpDzVFw', 'BNg209MQx7w', 'y2pMjnt_hAE', '48P15uLXAK0'];

App = {
  settings: {
    els: {
      $menu: document.querySelector('[data-menu]'),
      $menuBtn: document.querySelector('[data-menu-btn]'),
      $contacts: document.querySelector('[data-contacts]'),
      $contactsBtn: document.querySelector('[data-contacts-btn]'),
      $about: document.querySelector('[data-about]'),
      $aboutBtn: document.querySelector('[data-about-btn]'),
      $aboutBtnSecond: document.querySelector('[data-about-btn-second]'),
      $aboutBtnClose: document.querySelectorAll('[data-about-close-btn]'),
      $events: document.querySelector('[data-events]'),
      $eventsBtn: document.querySelector('[data-events-btn]'),
      $eventsBtnClose: document.querySelectorAll('[data-events-close-btn]'),
      $video: document.querySelector('[data-video]'),
      $videoBtn: document.querySelector('[data-video-btn]'),
      $videoBtnClose: document.querySelectorAll('[data-video-btn-close]'),
      $videoPrev: document.querySelector('[data-video-prev]'),
      $videoNext: document.querySelector('[data-video-next]'),
      $gallery: document.querySelector('[data-gallery]'),
      $galleryArrows: document.querySelector('[data-arrows]'),
      $galleryPrev: document.querySelector('[data-arrow-prev]'),
      $galleryNext: document.querySelector('[data-arrow-next]'),
      $socials: document.querySelector('[data-socials]'),
      $images: document.querySelectorAll('[data-image]')
    },
    state: {
      menuIsOpened: false,
      eventsIsOpened: false,
      aboutIsOpened: false,
      contactsIsOpened: false,
      galleryIsPlaying: false,
      backIsBlurred: false,
      arrowsAreShown: true,
      videoIsOpened: false,
      currentImage: 0,
      currentVideo: 0,
      playerIsReady: false,
      socialsAreShown: true
    },
    totalImagesCount: null
  },

  init: function init() {
    s = this.settings;
    _this = this;
    state = s.state;
    this.events.init();
    this.video.init();
  },

  helpers: {
    addClass: function addClass(element, className) {
      if (element.classList) {
        element.classList.add(className);
      } else {
        element.className += ' ' + className;
      }
    },

    removeClass: function removeClass(element, className) {
      if (element.classList) {
        element.classList.remove(className);
      } else {
        element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
      }
    }
  },

  video: {
    init: function init() {
      var _this2 = this;

      var YTScript = document.createElement('script');
      YTScript.src = "https://www.youtube.com/iframe_api";
      document.getElementsByTagName('head')[0].appendChild(YTScript);

      var interval = setInterval(function () {
        if (window.YT && window.YT.Player) {
          _this2.createYouTubePlayer();
          clearInterval(interval);
        }
      }, 1000);
    },

    createYouTubePlayer: function createYouTubePlayer() {
      player = new YT.Player('video', {
        videoId: YT_IDS[state.currentVideo],
        height: '360',
        width: '640',
        playerVars: {
          'autoplay': 0,
          'iv_load_policy': 3,
          'rel': 0,
          'showinfo': 0,
          'modestbranding': 1
        }
      });

      player.addEventListener('onReady', this.onPlayerReady);
      player.addEventListener('onStateChange', this.onVideoStateChange);
    },

    onPlayerReady: function onPlayerReady() {
      state.playerIsReady = true;
    },

    onVideoStateChange: function onVideoStateChange() {
      if (YT.PlayerState.ENDED) {
        this.loadNextVideo();
      }
    },

    loadPrevVideo: function loadPrevVideo() {
      if (YT_IDS.indexOf(YT_IDS[state.currentVideo]) === 0) {
        state.currentVideo = YT_IDS.length - 1;
      } else {
        state.currentVideo--;
      }
      player.loadVideoById(YT_IDS[state.currentVideo]);
      this.stop();
    },

    loadNextVideo: function loadNextVideo() {
      if (YT_IDS.indexOf(YT_IDS[state.currentVideo]) === YT_IDS.length - 1) {
        state.currentVideo = 0;
      } else {
        state.currentVideo++;
      }
      player.loadVideoById(YT_IDS[state.currentVideo]);
      this.stop();
    },

    stop: function stop() {
      player.stopVideo();
    }
  },

  gallery: {
    interval: null,

    init: function init() {
      this.initGallery();
      this.prevImage();
      this.nextImage();
    },

    initGallery: function initGallery() {
      var _this3 = this;

      this.interval = setInterval(function () {
        if (state.galleryIsPlaying) {
          _this3.changeImageForward();
        }
      }, 10000);
    },

    changeImageForward: function changeImageForward() {
      _this.helpers.removeClass(s.els.$images[state.currentImage], 'active');
      if (state.currentImage === _this.totalImagesCount) {
        state.currentImage = 0;
      } else {
        state.currentImage++;
      }
      _this.helpers.addClass(s.els.$images[state.currentImage], 'active');
    },

    changeImageBackward: function changeImageBackward() {
      _this.helpers.removeClass(s.els.$images[state.currentImage], 'active');
      if (state.currentImage === 0) {
        state.currentImage = _this.totalImagesCount;
      } else {
        state.currentImage--;
      }
      _this.helpers.addClass(s.els.$images[state.currentImage], 'active');
    },

    prevImage: function prevImage() {
      var _this4 = this;

      s.els.$galleryPrev.addEventListener('click', function () {
        clearInterval(_this4.interval);
        _this4.changeImageBackward();
        _this4.initGallery();
      });
    },

    nextImage: function nextImage() {
      var _this5 = this;

      s.els.$galleryNext.addEventListener('click', function () {
        clearInterval(_this5.interval);
        _this5.changeImageForward();
        _this5.initGallery();
      });
    }
  },

  events: {
    init: function init() {
      this.toggleMenu();
      this.toggleEvents();
      this.toggleContacts();
      this.toggleAbout();
      this.toggleVideo();

      _this.totalImagesCount = s.els.$images.length - 1;
      state.galleryIsPlaying = true;
      _this.gallery.init();
    },

    toggleVideo: function toggleVideo() {
      var interval = void 0;
      s.els.$videoBtn.addEventListener('click', function () {
        _this.updateState({
          videoIsOpened: true,
          menuIsOpened: false
        });
        _this.ui.updateUi();
      });

      for (var i = 0; i < s.els.$videoBtnClose.length; i++) {
        s.els.$videoBtnClose[i].addEventListener('click', function () {
          if (interval) clearInterval(interval);
          _this.updateState({
            videoIsOpened: false,
            menuIsOpened: true
          });
          _this.video.stop();
          _this.ui.updateUi();
        });
      }

      s.els.$videoPrev.addEventListener('click', function () {
        _this.video.loadPrevVideo();
      });

      s.els.$videoNext.addEventListener('click', function () {
        _this.video.loadNextVideo();
      });
    },

    toggleMenu: function toggleMenu() {
      s.els.$menuBtn.addEventListener('click', function () {
        if (state.menuIsOpened) {
          _this.updateState({
            menuIsOpened: false,
            aboutIsOpened: false,
            contactsIsOpened: false,
            galleryIsPlaying: true,
            arrowsAreShown: true,
            backIsBlurred: false,
            socialsAreShown: true
          });
        } else {
          _this.updateState({
            menuIsOpened: true,
            galleryIsPlaying: false,
            arrowsAreShown: false,
            backIsBlurred: true,
            aboutIsOpened: false,
            socialsAreShown: false
          });
        }

        _this.ui.updateUi();
      });
    },

    toggleContacts: function toggleContacts() {
      s.els.$contactsBtn.addEventListener('click', function () {
        if (state.contactsIsOpened) {
          _this.updateState({ contactsIsOpened: false });
        } else {
          _this.updateState({ contactsIsOpened: true });
        }

        _this.ui.updateUi();
      });
    },

    toggleAbout: function toggleAbout() {
      s.els.$aboutBtn.addEventListener('click', function () {
        _this.updateState({
          aboutIsOpened: true,
          menuIsOpened: false,
          contactsIsOpened: false
        });

        _this.ui.updateUi();
      });

      s.els.$aboutBtnSecond.addEventListener('click', function () {
        if (state.aboutIsOpened) {
          _this.updateState({
            aboutIsOpened: false,
            galleryIsPlaying: true,
            arrowsAreShown: true,
            backIsBlurred: false,
            menuIsOpened: false
          });
        } else {
          _this.updateState({
            aboutIsOpened: true,
            galleryIsPlaying: false,
            arrowsAreShown: false,
            backIsBlurred: true,
            menuIsOpened: false
          });
        }

        _this.ui.updateUi();
      });

      for (var i = 0; i < s.els.$aboutBtnClose.length; i++) {
        s.els.$aboutBtnClose[i].addEventListener('click', function () {
          _this.updateState({
            aboutIsOpened: false,
            menuIsOpened: true
          });

          _this.ui.updateUi();
        });
      }
    },

    toggleEvents: function toggleEvents() {
      s.els.$eventsBtn.addEventListener('click', function () {
        _this.updateState({
          eventsIsOpened: true,
          menuIsOpened: false,
          contactsIsOpened: false
        });

        _this.ui.updateUi();
      });


      for (var i = 0; i < s.els.$eventsBtnClose.length; i++) {
        s.els.$eventsBtnClose[i].addEventListener('click', function () {
          _this.updateState({
            aboutIsOpened: false,
            menuIsOpened: true,
            eventsIsOpened: false
          });

          _this.ui.updateUi();
        });
      }
    }
  },

  updateState: function updateState(newState) {
    state = Object.assign(state, newState);
  },

  ui: {
    updateUi: function updateUi() {
      var options = [{ stateKey: state.menuIsOpened, elementKey: '$menu' }, {
        stateKey: state.menuIsOpened,
        elementKey: '$menuBtn'
      }, { stateKey: state.videoIsOpened, elementKey: '$video' }, {
        stateKey: state.aboutIsOpened,
        elementKey: '$about'
      }, { stateKey: state.contactsIsOpened, elementKey: '$contacts' }, {
        stateKey: state.arrowsAreShown,
        elementKey: '$galleryArrows'
      }, {
        stateKey: state.backIsBlurred,
        elementKey: '$gallery',
        className: 'blurred'
      }, { stateKey: state.socialsAreShown, elementKey: '$socials' }, {
        stateKey: state.eventsIsOpened,
        elementKey: '$events'
      }];

      for (var i = 0; i < options.length; i++) {
        this.setElementUi(options[i].stateKey, s.els[options[i].elementKey], options[i].className);
      }
    },

    setElementUi: function setElementUi(state, element) {
      var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'active';

      if (state) {
        _this.helpers.addClass(element, className);
      } else {
        _this.helpers.removeClass(element, className);
      }
    }
  }
};

App.init();
